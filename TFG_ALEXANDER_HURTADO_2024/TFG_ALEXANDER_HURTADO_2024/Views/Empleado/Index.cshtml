@model IEnumerable<DB.Models.EMPLEADO>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="~/content/IndexStyle.css">
</head>
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h2 class="text-left mb-4">Lista de Empleados</h2>
            <hr />
            <div class="text-left mb-4 ml-0">
                <a href="@Url.Action("Create")" class="btn btn-success">Crear Nuevo</a>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <button id="generarPdfBtn" class="btn btn-danger">Generar PDF</button>
        </div>
    </div>


    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="bg-primary text-white">
                <tr>
                    <th class="text-center">Fecha de Ingreso</th>
                    <th class="text-center">Salario</th>
                    <th class="text-center">Id Administrador</th>
                    <th class="text-center">Id Empleados</th>
                    <th class="text-center">Nombre</th>
                    <th class="text-center">Cedula</th>
                    <th class="text-center">Acciones</th>

                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model)
                {
                    <tr>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.Fecha_Ingreso)</td>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.Salario)</td>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.Id_Administrador)</td>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.EMPLEADO1.Id_Empleados)</td>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.PERSONA.Nombre)</td>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.PERSONA.Cedula)</td>
                        <td class="text-center">
                            @Html.ActionLink("Editar", "Edit", new { idEmpleado = item.Id_Empleados, Cedula = item.Cedula }, new { @class = "btn btn-warning btn-sm" })
                            @Html.ActionLink("Detalles", "Details", new { idEmpleado = item.Id_Empleados, Cedula = item.Cedula }, new { @class = "btn btn-info btn-sm" })
                            @Html.ActionLink("Eliminar", "Delete", new { idEmpleado = item.Id_Empleados, Cedula = item.Cedula }, new { @class = "btn btn-danger btn-sm" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<script>
    document.getElementById('generarPdfBtn').addEventListener('click', function () {
        // Selecciona el elemento que contiene tu tabla
        const tabla = document.querySelector('.table');

        // Verifica si la tabla se encontró correctamente
        if (tabla) {
            // Clona la tabla para no afectar la original en la página web
            const tablaCopia = tabla.cloneNode(true);

            // Oculta la columna de acciones en la copia de la tabla
            const thAcciones = tablaCopia.querySelector('th:last-child');
            if (thAcciones) {
                thAcciones.style.display = 'none';
            }
            const filas = tablaCopia.querySelectorAll('tr');
            filas.forEach(fila => {
                const tdAcciones = fila.querySelector('td:last-child');
                if (tdAcciones) {
                    tdAcciones.style.display = 'none';
                }
            });

            // Aplica estilos CSS para evitar cortes de datos en la copia de la tabla
            tablaCopia.style.overflow = 'auto';
            tablaCopia.style.width = '100%';

            // Ajusta el tamaño de fuente para el contenido de la copia de la tabla
            const celdas = tablaCopia.querySelectorAll('td, th');
            celdas.forEach(celda => {
                celda.style.whiteSpace = 'nowrap'; // Evita el corte de texto
                celda.style.overflow = 'hidden'; // Oculta el texto que no cabe
                celda.style.textOverflow = 'ellipsis'; // Muestra puntos suspensivos para indicar texto truncado
                celda.style.fontSize = '10px'; // Ajusta el tamaño de fuente según sea necesario
            });

            // Opciones para la generación del PDF
            const options = {
                filename: 'Empleados.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2 },
                jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
            };

            // Genera el PDF desde la copia de la tabla
            html2pdf().from(tablaCopia).set(options).save();
        } else {
            console.error('No se pudo encontrar la tabla.');
        }
    });


</script> @if (Session["Error"] != null){ <script>NoSeElimino('@Session["Error"].ToString()');</script> }
